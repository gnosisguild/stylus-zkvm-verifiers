use alloc::{vec, boxed::Box};
use stylus_sdk::alloy_primitives::U256;
use crate::common::{VerificationKey, G1Point, G2Point};

pub mod vk {
    use super::*;

    pub fn get_verification_key() -> VerificationKey {
        let alpha1 = G1Point {
            x: U256::from_str_radix("20491192805390485299153009773594534940189261866228447918068658471970481763042", 10).unwrap(),
            y: U256::from_str_radix("9383485363053290200918347156157836566562967994039712273449902621266178545958", 10).unwrap(),
        };

        let beta2 = G2Point {
            x: [
                U256::from_str_radix("6375614351688725206403948262868962793625744043794305715222011528459656738731", 10).unwrap(),
                U256::from_str_radix("4252822878758300859123897981450591353533073413197771768651442665752259397132", 10).unwrap(),
            ],
            y: [
                U256::from_str_radix("11383000245469012944693504663162918391286475477077232690815866754273895001727", 10).unwrap(),
                U256::from_str_radix("41207766310529818958173054109690360505148424997958324311878202295167071904", 10).unwrap(),
            ],
        };

        let gamma2 = G2Point {
            x: [
                U256::from_str_radix("10857046999023057135944570762232829481370756359578518086990519993285655852781", 10).unwrap(),
                U256::from_str_radix("11559732032986387107991004021392285783925812861821192530917403151452391805634", 10).unwrap(),
            ],
            y: [
                U256::from_str_radix("13392588948715843804641432497768002650278120570034223513918757245338268106653", 10).unwrap(),
                U256::from_str_radix("17805874995975841540914202342111839520379459829704422454583296818431106115052", 10).unwrap(),
            ],
        };

        let delta2 = G2Point {
            x: [
                U256::from_str_radix("20409334339251888712441068872870136503388893688417321778880931483231354129143", 10).unwrap(),
                U256::from_str_radix("15228921016905275799965683851057599185732146900672862119304638397355443707454", 10).unwrap(),
            ],
            y: [
                U256::from_str_radix("19877240297427940090516929163964707799250026674662843458659550601453241207282", 10).unwrap(),
                U256::from_str_radix("7264328423023871043957062501982202910010974353266020262517510882033855725085", 10).unwrap(),
            ],
        };

        let ic_points = vec![
            G1Point {
                x: U256::from_str_radix("1048662465858378462039546739271490393047466817500184066040897033812283855432", 10).unwrap(),
                y: U256::from_str_radix("19955603142782979624537809602226324406438922060777785976295407357266173213699", 10).unwrap(),
            },
            G1Point {
                x: U256::from_str_radix("8880870171820178879315138727491177243876706074048591778960954962478121292427", 10).unwrap(),
                y: U256::from_str_radix("9645782069397560173565155195986190258176410930403315934875366540532269958807", 10).unwrap(),
            },
            G1Point {
                x: U256::from_str_radix("1568022209015269256635037559407721536321962002203490351642786232392950111552", 10).unwrap(),
                y: U256::from_str_radix("7099579151192302668913697450512320120875549565559727060892675623506103788981", 10).unwrap(),
            },
        ];

        let ic_static: &'static [G1Point] = Box::leak(ic_points.into_boxed_slice());

        VerificationKey {
            alpha1,
            beta2,
            gamma2, 
            delta2,
            ic: ic_static,
        }
    }
} 