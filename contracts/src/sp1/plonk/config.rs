use stylus_sdk::alloy_primitives::{uint, Address, B256, U256};
use alloc::vec;

pub const VERSION: &str = "v5.0.0";

pub const VERIFIER_HASH: B256 = B256::new([
    0xd4, 0xe8, 0xec, 0xd2, 0x35, 0x7d, 0xd8, 0x82,
    0x20, 0x98, 0x00, 0xac, 0xd6, 0xab, 0xb4, 0x43,
    0xd2, 0x31, 0xcf, 0x28, 0x7d, 0x77, 0xba, 0x62,
    0xb7, 0x32, 0xce, 0x93, 0x7c, 0x8b, 0x56, 0xe7,
]);

pub const R_MOD: U256 = uint!(0x30644E72E131A029B85045B68181585D2833E84879B9709143E1F593F0000001_U256);
pub const P_MOD: U256 = uint!(0x30644E72E131A029B85045B68181585D97816A916871CA8D3C208C16D87CFD47_U256);

pub const P_MINUS_ONE: U256 = uint!(0x30644E72E131A029B85045B68181585D97816A916871CA8D3C208C16D87CFD46_U256);
pub const R_MINUS_TWO: U256 = uint!(0x30644E72E131A029B85045B68181585D2833E84879B9709143E1F593EFFFFFFF_U256);

pub const EC_ADD: Address  = Address::new([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6]);
pub const EC_MUL: Address  = Address::new([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7]);
pub const EC_PAIR: Address = Address::new([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8]);
pub const MOD_EXP: Address = Address::new([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5]);
pub const SHA2: Address    = Address::new([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2]);
pub mod vk {
    use super::*;
    use crate::sp1::plonk::types::PlonkVerifyingKey;
    use crate::common::{G1Point, G2Point};

    pub const NB_PUBLIC_INPUTS: usize = 2;
    pub const DOMAIN_SIZE: u64 = 16_777_216;
    pub const INV_DOMAIN_SIZE: U256 = uint!(0x30644E72E131A029B85045B68181585AFCCF40459B5341CA18771FE8D0D51211_U256);
    pub const OMEGA: U256 = uint!(0x0c9fabc7845d50d2852e2a0371c6441f145e0db82e8326961c25f1e3e32b045b_U256);
    pub const COSET_SHIFT: U256 = uint!(5_U256);

    pub const G1_SRS_X: U256 = uint!(0x1FA4BE93B5E7F7E674D5059B63554FAB99638B304ED8310E9FA44C281AC9B03B_U256);
    pub const G1_SRS_Y: U256 = uint!(0x1A01AE7FAC6228E39D3CB5A5E71FD31160F3241E79A5F48FFB3737E6C389B721_U256);

    pub const G2_SRS_0_X_0: U256 = uint!(11559732032986387107991004021392285783925812861821192530917403151452391805634_U256);
    pub const G2_SRS_0_X_1: U256 = uint!(10857046999023057135944570762232829481370756359578518086990519993285655852781_U256);
    pub const G2_SRS_0_Y_0: U256 = uint!(4082367875863433681332203403145435568316851327593401208105741076214120093531_U256);
    pub const G2_SRS_0_Y_1: U256 = uint!(8495653923123431417604973247489272438418190587263600148770280649306958101930_U256);

    pub const G2_SRS_1_X_0: U256 = uint!(15805639136721018565402881920352193254830339253282065586954346329754995870280_U256);
    pub const G2_SRS_1_X_1: U256 = uint!(19089565590083334368588890253123139704298730990782503769911324779715431555531_U256);
    pub const G2_SRS_1_Y_0: U256 = uint!(9779648407879205346559610309258181044130619080926897934572699915909528404984_U256);
    pub const G2_SRS_1_Y_1: U256 = uint!(6779728121489434657638426458390319301070371227460768374343986326751507916979_U256);

    pub const QL_X: U256 = uint!(0x60081D04D187D301D4223990ACAB3C887713358F1705AF7F53E07ACA0F709DD_U256);
    pub const QL_Y: U256 = uint!(0x16911506AD1CCF9B39DB250CE7752278C8115127C4F85080C2BD153946B4A5BE_U256);
    
    pub const QR_X: U256 = uint!(0x279DF33B57D698EFD752579EE90674A7241ECDB21C6CB35CDF8EF7C1AF73160A_U256);
    pub const QR_Y: U256 = uint!(0x202FA12C1E82DE2F49DC4C5BC771B94C8495544BB0055C4C381744CC3D1D332D_U256);
    
    pub const QM_X: U256 = uint!(0x40315F3FD753E8CCA89F353D096FB94FCDF9CD41973954A3DD4EC58CBA79D5F_U256);
    pub const QM_Y: U256 = uint!(0x18E0B4A84E9429C05D0FD0D304ACD0F3CFA93437356C112199D4D7C0162A1C9E_U256);
    
    pub const QO_X: U256 = uint!(0x2E14E072AB351D1B3838323F75ECF9B6C08043C230423D515FEBD04E29336B77_U256);
    pub const QO_Y: U256 = uint!(0x1553E1A7B6E18BA105733244604CD37D82371C3A7B0503FA4AFF460870170BCF_U256);
    
    pub const QK_X: U256 = uint!(0xC203D7594EFA49BD977084DE30DB24CE843E501791176C21B5BEDA79CEAF136_U256);
    pub const QK_Y: U256 = uint!(0xC4BDDEB52250B0114282B00285F224B812FC581F2B55E5C3A49472069F901F3_U256);
    
    pub const S1_X: U256 = uint!(0x239ED22AF3191CFCCD323949E417667DEFBCB082D9F31527488E523372EA9E7A_U256);
    pub const S1_Y: U256 = uint!(0x213DA3CB623029A98E0186DC8C1A3A31EE249AB93BFB68ABC1103900890ECCB9_U256);
    
    pub const S2_X: U256 = uint!(0x1FD59B61F15D097AD7701C4DC12B8739EADC1D54664773C3ED5D8104C296C2A_U256);
    pub const S2_Y: U256 = uint!(0x22EE53909FEAB41BB47F0E6DDB802BB6096FD2027D89C22D94B4E56E227CD0_U256);
    
    pub const S3_X: U256 = uint!(0x14992DEA1A6515E3F8A2250E30CB9E3BAD58FF44BBFDD1390BC8D0A8F2BDDD0F_U256);
    pub const S3_Y: U256 = uint!(0x1E82777C7079B474D31F9FEDAFCA8F2D108DE5C58A2DF629A8AF49CD424C8C29_U256);
    
    pub const QCP_0_X: U256 = uint!(0x2FB4FBB4677318EDEC4B80FC8FA22FFCCE4A51D5F3771E575E726E790A9F9CBE_U256);
    pub const QCP_0_Y: U256 = uint!(0x28518B11376DC02418849D45B1F3B0E00D3F74502D713B002B9D7293A1018D79_U256);

    pub fn get_verification_key() -> PlonkVerifyingKey {
        PlonkVerifyingKey {
            size: DOMAIN_SIZE as usize,
            size_inv: INV_DOMAIN_SIZE,
            generator: OMEGA,
            nb_public_variables: NB_PUBLIC_INPUTS,
            coset_shift: COSET_SHIFT,
            // kzg data
            g1: G1Point { x: G1_SRS_X, y: G1_SRS_Y },
            g2: [
                G2Point {
                    x: [G2_SRS_0_X_0, G2_SRS_0_X_1],
                    y: [G2_SRS_0_Y_0, G2_SRS_0_Y_1],
                },
                G2Point {
                    x: [G2_SRS_1_X_0, G2_SRS_1_X_1],
                    y: [G2_SRS_1_Y_0, G2_SRS_1_Y_1],
                },
            ],
            // commitments
            s: [
                G1Point { x: S1_X, y: S1_Y }, // VK_S1_COM_X, VK_S1_COM_Y
                G1Point { x: S2_X, y: S2_Y }, // VK_S2_COM_X, VK_S2_COM_Y
                G1Point { x: S3_X, y: S3_Y }, // VK_S3_COM_X, VK_S3_COM_Y
            ],
            ql: G1Point { x: QL_X, y: QL_Y },
            qr: G1Point { x: QR_X, y: QR_Y },
            qm: G1Point { x: QM_X, y: QM_Y },
            qo: G1Point { x: QO_X, y: QO_Y },
            qk: G1Point { x: QK_X, y: QK_Y },
            qcp: vec![
                G1Point { x: QCP_0_X, y: QCP_0_Y }, // VK_QCP_0_X, VK_QCP_0_Y
            ],
            // custom gate index
            commitment_constraint_indexes: vec![10900304usize], // From your code
        }
    }
}